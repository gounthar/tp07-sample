name: Build and Deploy

# Define the events that trigger the workflow
on:
  push: # Trigger on push events to the main branch
    branches:
      - main
  pull_request: # Trigger on pull request events to the main branch
    branches:
      - main
  release: # Trigger on release creation
    types: [created]
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Check out repository
        uses: actions/checkout@v4 # Check out the repository code

      - name: Set up Java 17
        uses: actions/setup-java@v4 # Set up Java 17 environment
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn install # Build the project using Maven

      - name: List target directory contents
        run: ls -la target # List the contents of the target directory

      - name: Upload war file
        uses: actions/upload-artifact@v4 # Upload the built WAR file as an artifact
        with:
          name: war-file
          path: target/*.war

  upload-release-asset:
    needs: build # This job depends on the build job
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    if: github.event_name == 'release' # Only run this job on release events
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 # Check out the repository code

      - name: Upload war file to GitHub package
        uses: actions/upload-release-asset@v1 # Upload the WAR file to the release
        with:
          upload_url: ${{ github.event.release.upload_url }} # Use the release upload URL
          asset_path: target/*.war
          asset_name: sample.war
          asset_content_type: application/zip

  create-release:
    needs: build # This job depends on the build job
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Only run this job on push events to the main branch
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 # Check out the repository code

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions' # Set Git user name
          git config --global user.email 'github-actions@github.com' # Set Git user email

      - name: Get version
        id: version
        run: echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT # Get the project version

      - name: Update project version
        run: mvn versions:set -DnewVersion="$(date +'%Y.%m.%d-%H%M%S')" # Update the project version to the current date and time

      - name: Commit updated pom.xml
        run: |
          git add pom.xml # Add the updated pom.xml to Git
          git commit -m "Update project version to $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" # Commit the changes

      - name: Create release
        uses: softprops/action-gh-release@v2 # Create a new GitHub release
        with:
          tag_name: ${{ format('v{0}', steps.version.outputs.version) }} # Set the tag name for the release
          name: Release ${{ format('v{0}', steps.version.outputs.version) }} # Set the name for the release
          draft: false # Mark the release as not a draft
          prerelease: false # Mark the release as not a pre-release
          files: target/*.war # Attach the WAR file to the release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Push changes
        run: git push # Push the changes to the repository
